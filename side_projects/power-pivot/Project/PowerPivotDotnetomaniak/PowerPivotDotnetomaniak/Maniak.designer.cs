#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4206
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PowerPivotDotnetomaniak
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Kigg")]
	public partial class ManiakDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStory(Story instance);
    partial void UpdateStory(Story instance);
    partial void DeleteStory(Story instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertStoryTag(StoryTag instance);
    partial void UpdateStoryTag(StoryTag instance);
    partial void DeleteStoryTag(StoryTag instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertStoryComment(StoryComment instance);
    partial void UpdateStoryComment(StoryComment instance);
    partial void DeleteStoryComment(StoryComment instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserScore(UserScore instance);
    partial void UpdateUserScore(UserScore instance);
    partial void DeleteUserScore(UserScore instance);
    partial void InsertUserTag(UserTag instance);
    partial void UpdateUserTag(UserTag instance);
    partial void DeleteUserTag(UserTag instance);
    partial void InsertStoryView(StoryView instance);
    partial void UpdateStoryView(StoryView instance);
    partial void DeleteStoryView(StoryView instance);
    partial void InsertStoryVote(StoryVote instance);
    partial void UpdateStoryVote(StoryVote instance);
    partial void DeleteStoryVote(StoryVote instance);
    #endregion
		
		public ManiakDataContext() : 
				base(global::PowerPivotDotnetomaniak.Properties.Settings.Default.KiggConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ManiakDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManiakDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManiakDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManiakDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Story> Stories
		{
			get
			{
				return this.GetTable<Story>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<StoryTag> StoryTags
		{
			get
			{
				return this.GetTable<StoryTag>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<StoryComment> StoryComments
		{
			get
			{
				return this.GetTable<StoryComment>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserScore> UserScores
		{
			get
			{
				return this.GetTable<UserScore>();
			}
		}
		
		public System.Data.Linq.Table<UserTag> UserTags
		{
			get
			{
				return this.GetTable<UserTag>();
			}
		}
		
		public System.Data.Linq.Table<StoryView> StoryViews
		{
			get
			{
				return this.GetTable<StoryView>();
			}
		}
		
		public System.Data.Linq.Table<StoryVote> StoryVotes
		{
			get
			{
				return this.GetTable<StoryVote>();
			}
		}
	}
	
	[Table(Name="dbo.Story")]
	public partial class Story : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UniqueName;
		
		private string _Title;
		
		private string _HtmlDescription;
		
		private string _TextDescription;
		
		private string _Url;
		
		private string _UrlHash;
		
		private System.Guid _CategoryId;
		
		private System.Guid _UserId;
		
		private string _IPAddress;
		
		private System.DateTime _CreatedAt;
		
		private System.DateTime _LastActivityAt;
		
		private System.Nullable<System.DateTime> _SpammedAt;
		
		private System.Nullable<System.DateTime> _PublishedAt;
		
		private System.Nullable<int> _Rank;
		
		private System.Nullable<System.DateTime> _LastProcessedAt;
		
		private System.Nullable<System.DateTime> _ApprovedAt;
		
		private EntitySet<StoryTag> _StoryTags;
		
		private EntitySet<StoryComment> _StoryComments;
		
		private EntitySet<StoryView> _StoryViews;
		
		private EntitySet<StoryVote> _StoryVotes;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUniqueNameChanging(string value);
    partial void OnUniqueNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnHtmlDescriptionChanging(string value);
    partial void OnHtmlDescriptionChanged();
    partial void OnTextDescriptionChanging(string value);
    partial void OnTextDescriptionChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnUrlHashChanging(string value);
    partial void OnUrlHashChanged();
    partial void OnCategoryIdChanging(System.Guid value);
    partial void OnCategoryIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnLastActivityAtChanging(System.DateTime value);
    partial void OnLastActivityAtChanged();
    partial void OnSpammedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnSpammedAtChanged();
    partial void OnPublishedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishedAtChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    partial void OnLastProcessedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnLastProcessedAtChanged();
    partial void OnApprovedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedAtChanged();
    #endregion
		
		public Story()
		{
			this._StoryTags = new EntitySet<StoryTag>(new Action<StoryTag>(this.attach_StoryTags), new Action<StoryTag>(this.detach_StoryTags));
			this._StoryComments = new EntitySet<StoryComment>(new Action<StoryComment>(this.attach_StoryComments), new Action<StoryComment>(this.detach_StoryComments));
			this._StoryViews = new EntitySet<StoryView>(new Action<StoryView>(this.attach_StoryViews), new Action<StoryView>(this.detach_StoryViews));
			this._StoryVotes = new EntitySet<StoryVote>(new Action<StoryVote>(this.attach_StoryVotes), new Action<StoryVote>(this.detach_StoryVotes));
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UniqueName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UniqueName
		{
			get
			{
				return this._UniqueName;
			}
			set
			{
				if ((this._UniqueName != value))
				{
					this.OnUniqueNameChanging(value);
					this.SendPropertyChanging();
					this._UniqueName = value;
					this.SendPropertyChanged("UniqueName");
					this.OnUniqueNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_HtmlDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string HtmlDescription
		{
			get
			{
				return this._HtmlDescription;
			}
			set
			{
				if ((this._HtmlDescription != value))
				{
					this.OnHtmlDescriptionChanging(value);
					this.SendPropertyChanging();
					this._HtmlDescription = value;
					this.SendPropertyChanged("HtmlDescription");
					this.OnHtmlDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_TextDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextDescription
		{
			get
			{
				return this._TextDescription;
			}
			set
			{
				if ((this._TextDescription != value))
				{
					this.OnTextDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TextDescription = value;
					this.SendPropertyChanged("TextDescription");
					this.OnTextDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(2048) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_UrlHash", DbType="NChar(24) NOT NULL", CanBeNull=false)]
		public string UrlHash
		{
			get
			{
				return this._UrlHash;
			}
			set
			{
				if ((this._UrlHash != value))
				{
					this.OnUrlHashChanging(value);
					this.SendPropertyChanging();
					this._UrlHash = value;
					this.SendPropertyChanged("UrlHash");
					this.OnUrlHashChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_IPAddress", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityAt", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityAt
		{
			get
			{
				return this._LastActivityAt;
			}
			set
			{
				if ((this._LastActivityAt != value))
				{
					this.OnLastActivityAtChanging(value);
					this.SendPropertyChanging();
					this._LastActivityAt = value;
					this.SendPropertyChanged("LastActivityAt");
					this.OnLastActivityAtChanged();
				}
			}
		}
		
		[Column(Storage="_SpammedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> SpammedAt
		{
			get
			{
				return this._SpammedAt;
			}
			set
			{
				if ((this._SpammedAt != value))
				{
					this.OnSpammedAtChanging(value);
					this.SendPropertyChanging();
					this._SpammedAt = value;
					this.SendPropertyChanged("SpammedAt");
					this.OnSpammedAtChanged();
				}
			}
		}
		
		[Column(Storage="_PublishedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> PublishedAt
		{
			get
			{
				return this._PublishedAt;
			}
			set
			{
				if ((this._PublishedAt != value))
				{
					this.OnPublishedAtChanging(value);
					this.SendPropertyChanging();
					this._PublishedAt = value;
					this.SendPropertyChanged("PublishedAt");
					this.OnPublishedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Rank", DbType="Int")]
		public System.Nullable<int> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[Column(Storage="_LastProcessedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastProcessedAt
		{
			get
			{
				return this._LastProcessedAt;
			}
			set
			{
				if ((this._LastProcessedAt != value))
				{
					this.OnLastProcessedAtChanging(value);
					this.SendPropertyChanging();
					this._LastProcessedAt = value;
					this.SendPropertyChanged("LastProcessedAt");
					this.OnLastProcessedAtChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApprovedAt
		{
			get
			{
				return this._ApprovedAt;
			}
			set
			{
				if ((this._ApprovedAt != value))
				{
					this.OnApprovedAtChanging(value);
					this.SendPropertyChanging();
					this._ApprovedAt = value;
					this.SendPropertyChanged("ApprovedAt");
					this.OnApprovedAtChanged();
				}
			}
		}
		
		[Association(Name="Story_StoryTag", Storage="_StoryTags", ThisKey="Id", OtherKey="StoryId")]
		public EntitySet<StoryTag> StoryTags
		{
			get
			{
				return this._StoryTags;
			}
			set
			{
				this._StoryTags.Assign(value);
			}
		}
		
		[Association(Name="Story_StoryComment", Storage="_StoryComments", ThisKey="Id", OtherKey="StoryId")]
		public EntitySet<StoryComment> StoryComments
		{
			get
			{
				return this._StoryComments;
			}
			set
			{
				this._StoryComments.Assign(value);
			}
		}
		
		[Association(Name="Story_StoryView", Storage="_StoryViews", ThisKey="Id", OtherKey="StoryId")]
		public EntitySet<StoryView> StoryViews
		{
			get
			{
				return this._StoryViews;
			}
			set
			{
				this._StoryViews.Assign(value);
			}
		}
		
		[Association(Name="Story_StoryVote", Storage="_StoryVotes", ThisKey="Id", OtherKey="StoryId")]
		public EntitySet<StoryVote> StoryVotes
		{
			get
			{
				return this._StoryVotes;
			}
			set
			{
				this._StoryVotes.Assign(value);
			}
		}
		
		[Association(Name="Category_Story", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Stories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Stories.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(System.Guid);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="User_Story", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Stories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Stories.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoryTags(StoryTag entity)
		{
			this.SendPropertyChanging();
			entity.Story = this;
		}
		
		private void detach_StoryTags(StoryTag entity)
		{
			this.SendPropertyChanging();
			entity.Story = null;
		}
		
		private void attach_StoryComments(StoryComment entity)
		{
			this.SendPropertyChanging();
			entity.Story = this;
		}
		
		private void detach_StoryComments(StoryComment entity)
		{
			this.SendPropertyChanging();
			entity.Story = null;
		}
		
		private void attach_StoryViews(StoryView entity)
		{
			this.SendPropertyChanging();
			entity.Story = this;
		}
		
		private void detach_StoryViews(StoryView entity)
		{
			this.SendPropertyChanging();
			entity.Story = null;
		}
		
		private void attach_StoryVotes(StoryVote entity)
		{
			this.SendPropertyChanging();
			entity.Story = this;
		}
		
		private void detach_StoryVotes(StoryVote entity)
		{
			this.SendPropertyChanging();
			entity.Story = null;
		}
	}
	
	[Table(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UniqueName;
		
		private string _Name;
		
		private System.DateTime _CreatedAt;
		
		private EntitySet<StoryTag> _StoryTags;
		
		private EntitySet<UserTag> _UserTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUniqueNameChanging(string value);
    partial void OnUniqueNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    #endregion
		
		public Tag()
		{
			this._StoryTags = new EntitySet<StoryTag>(new Action<StoryTag>(this.attach_StoryTags), new Action<StoryTag>(this.detach_StoryTags));
			this._UserTags = new EntitySet<UserTag>(new Action<UserTag>(this.attach_UserTags), new Action<UserTag>(this.detach_UserTags));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UniqueName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string UniqueName
		{
			get
			{
				return this._UniqueName;
			}
			set
			{
				if ((this._UniqueName != value))
				{
					this.OnUniqueNameChanging(value);
					this.SendPropertyChanging();
					this._UniqueName = value;
					this.SendPropertyChanged("UniqueName");
					this.OnUniqueNameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Association(Name="Tag_StoryTag", Storage="_StoryTags", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<StoryTag> StoryTags
		{
			get
			{
				return this._StoryTags;
			}
			set
			{
				this._StoryTags.Assign(value);
			}
		}
		
		[Association(Name="Tag_UserTag", Storage="_UserTags", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<UserTag> UserTags
		{
			get
			{
				return this._UserTags;
			}
			set
			{
				this._UserTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoryTags(StoryTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_StoryTags(StoryTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
		
		private void attach_UserTags(UserTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_UserTags(UserTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[Table(Name="dbo.StoryTag")]
	public partial class StoryTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StoryId;
		
		private System.Guid _TagId;
		
		private EntityRef<Story> _Story;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoryIdChanging(System.Guid value);
    partial void OnStoryIdChanged();
    partial void OnTagIdChanging(System.Guid value);
    partial void OnTagIdChanged();
    #endregion
		
		public StoryTag()
		{
			this._Story = default(EntityRef<Story>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[Column(Storage="_StoryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StoryId
		{
			get
			{
				return this._StoryId;
			}
			set
			{
				if ((this._StoryId != value))
				{
					if (this._Story.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoryIdChanging(value);
					this.SendPropertyChanging();
					this._StoryId = value;
					this.SendPropertyChanged("StoryId");
					this.OnStoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_TagId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Association(Name="Story_StoryTag", Storage="_Story", ThisKey="StoryId", OtherKey="Id", IsForeignKey=true)]
		public Story Story
		{
			get
			{
				return this._Story.Entity;
			}
			set
			{
				Story previousValue = this._Story.Entity;
				if (((previousValue != value) 
							|| (this._Story.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Story.Entity = null;
						previousValue.StoryTags.Remove(this);
					}
					this._Story.Entity = value;
					if ((value != null))
					{
						value.StoryTags.Add(this);
						this._StoryId = value.Id;
					}
					else
					{
						this._StoryId = default(System.Guid);
					}
					this.SendPropertyChanged("Story");
				}
			}
		}
		
		[Association(Name="Tag_StoryTag", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.StoryTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.StoryTags.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(System.Guid);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UniqueName;
		
		private string _Name;
		
		private System.DateTime _CreatedAt;
		
		private EntitySet<Story> _Stories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUniqueNameChanging(string value);
    partial void OnUniqueNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    #endregion
		
		public Category()
		{
			this._Stories = new EntitySet<Story>(new Action<Story>(this.attach_Stories), new Action<Story>(this.detach_Stories));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UniqueName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string UniqueName
		{
			get
			{
				return this._UniqueName;
			}
			set
			{
				if ((this._UniqueName != value))
				{
					this.OnUniqueNameChanging(value);
					this.SendPropertyChanging();
					this._UniqueName = value;
					this.SendPropertyChanged("UniqueName");
					this.OnUniqueNameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Association(Name="Category_Story", Storage="_Stories", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Story> Stories
		{
			get
			{
				return this._Stories;
			}
			set
			{
				this._Stories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.StoryComment")]
	public partial class StoryComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _HtmlBody;
		
		private string _TextBody;
		
		private System.DateTime _CreatedAt;
		
		private System.Guid _StoryId;
		
		private System.Guid _UserId;
		
		private string _IPAddress;
		
		private bool _IsOffended;
		
		private EntityRef<Story> _Story;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnHtmlBodyChanging(string value);
    partial void OnHtmlBodyChanged();
    partial void OnTextBodyChanging(string value);
    partial void OnTextBodyChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnStoryIdChanging(System.Guid value);
    partial void OnStoryIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnIsOffendedChanging(bool value);
    partial void OnIsOffendedChanged();
    #endregion
		
		public StoryComment()
		{
			this._Story = default(EntityRef<Story>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_HtmlBody", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string HtmlBody
		{
			get
			{
				return this._HtmlBody;
			}
			set
			{
				if ((this._HtmlBody != value))
				{
					this.OnHtmlBodyChanging(value);
					this.SendPropertyChanging();
					this._HtmlBody = value;
					this.SendPropertyChanged("HtmlBody");
					this.OnHtmlBodyChanged();
				}
			}
		}
		
		[Column(Storage="_TextBody", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextBody
		{
			get
			{
				return this._TextBody;
			}
			set
			{
				if ((this._TextBody != value))
				{
					this.OnTextBodyChanging(value);
					this.SendPropertyChanging();
					this._TextBody = value;
					this.SendPropertyChanged("TextBody");
					this.OnTextBodyChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_StoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StoryId
		{
			get
			{
				return this._StoryId;
			}
			set
			{
				if ((this._StoryId != value))
				{
					if (this._Story.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoryIdChanging(value);
					this.SendPropertyChanging();
					this._StoryId = value;
					this.SendPropertyChanged("StoryId");
					this.OnStoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_IPAddress", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Column(Storage="_IsOffended", DbType="Bit NOT NULL")]
		public bool IsOffended
		{
			get
			{
				return this._IsOffended;
			}
			set
			{
				if ((this._IsOffended != value))
				{
					this.OnIsOffendedChanging(value);
					this.SendPropertyChanging();
					this._IsOffended = value;
					this.SendPropertyChanged("IsOffended");
					this.OnIsOffendedChanged();
				}
			}
		}
		
		[Association(Name="Story_StoryComment", Storage="_Story", ThisKey="StoryId", OtherKey="Id", IsForeignKey=true)]
		public Story Story
		{
			get
			{
				return this._Story.Entity;
			}
			set
			{
				Story previousValue = this._Story.Entity;
				if (((previousValue != value) 
							|| (this._Story.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Story.Entity = null;
						previousValue.StoryComments.Remove(this);
					}
					this._Story.Entity = value;
					if ((value != null))
					{
						value.StoryComments.Add(this);
						this._StoryId = value.Id;
					}
					else
					{
						this._StoryId = default(System.Guid);
					}
					this.SendPropertyChanged("Story");
				}
			}
		}
		
		[Association(Name="User_StoryComment", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StoryComments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StoryComments.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Email;
		
		private bool _IsActive;
		
		private bool _IsLockedOut;
		
		private int _Role;
		
		private System.DateTime _LastActivityAt;
		
		private System.DateTime _CreatedAt;
		
		private EntitySet<Story> _Stories;
		
		private EntitySet<StoryComment> _StoryComments;
		
		private EntitySet<UserScore> _UserScores;
		
		private EntitySet<UserTag> _UserTags;
		
		private EntitySet<StoryVote> _StoryVotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    partial void OnLastActivityAtChanging(System.DateTime value);
    partial void OnLastActivityAtChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    #endregion
		
		public User()
		{
			this._Stories = new EntitySet<Story>(new Action<Story>(this.attach_Stories), new Action<Story>(this.detach_Stories));
			this._StoryComments = new EntitySet<StoryComment>(new Action<StoryComment>(this.attach_StoryComments), new Action<StoryComment>(this.detach_StoryComments));
			this._UserScores = new EntitySet<UserScore>(new Action<UserScore>(this.attach_UserScores), new Action<UserScore>(this.detach_UserScores));
			this._UserTags = new EntitySet<UserTag>(new Action<UserTag>(this.attach_UserTags), new Action<UserTag>(this.detach_UserTags));
			this._StoryVotes = new EntitySet<StoryVote>(new Action<StoryVote>(this.attach_StoryVotes), new Action<StoryVote>(this.detach_StoryVotes));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(64)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="Int NOT NULL")]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityAt", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityAt
		{
			get
			{
				return this._LastActivityAt;
			}
			set
			{
				if ((this._LastActivityAt != value))
				{
					this.OnLastActivityAtChanging(value);
					this.SendPropertyChanging();
					this._LastActivityAt = value;
					this.SendPropertyChanged("LastActivityAt");
					this.OnLastActivityAtChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Association(Name="User_Story", Storage="_Stories", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Story> Stories
		{
			get
			{
				return this._Stories;
			}
			set
			{
				this._Stories.Assign(value);
			}
		}
		
		[Association(Name="User_StoryComment", Storage="_StoryComments", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<StoryComment> StoryComments
		{
			get
			{
				return this._StoryComments;
			}
			set
			{
				this._StoryComments.Assign(value);
			}
		}
		
		[Association(Name="User_UserScore", Storage="_UserScores", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserScore> UserScores
		{
			get
			{
				return this._UserScores;
			}
			set
			{
				this._UserScores.Assign(value);
			}
		}
		
		[Association(Name="User_UserTag", Storage="_UserTags", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserTag> UserTags
		{
			get
			{
				return this._UserTags;
			}
			set
			{
				this._UserTags.Assign(value);
			}
		}
		
		[Association(Name="User_StoryVote", Storage="_StoryVotes", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<StoryVote> StoryVotes
		{
			get
			{
				return this._StoryVotes;
			}
			set
			{
				this._StoryVotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StoryComments(StoryComment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StoryComments(StoryComment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserScores(UserScore entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserScores(UserScore entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserTags(UserTag entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserTags(UserTag entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StoryVotes(StoryVote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StoryVotes(StoryVote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UserScore")]
	public partial class UserScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Guid _UserId;
		
		private System.DateTime _Timestamp;
		
		private int _ActionType;
		
		private decimal _Score;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnActionTypeChanging(int value);
    partial void OnActionTypeChanged();
    partial void OnScoreChanging(decimal value);
    partial void OnScoreChanged();
    #endregion
		
		public UserScore()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_ActionType", DbType="Int NOT NULL")]
		public int ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Decimal(5,2) NOT NULL")]
		public decimal Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Association(Name="User_UserScore", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserScores.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserScores.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserTag")]
	public partial class UserTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _TagId;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnTagIdChanging(System.Guid value);
    partial void OnTagIdChanged();
    #endregion
		
		public UserTag()
		{
			this._Tag = default(EntityRef<Tag>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_TagId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Association(Name="Tag_UserTag", Storage="_Tag", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.UserTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.UserTags.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(System.Guid);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[Association(Name="User_UserTag", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserTags.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserTags.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StoryView")]
	public partial class StoryView : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Guid _StoryId;
		
		private System.DateTime _Timestamp;
		
		private string _IPAddress;
		
		private EntityRef<Story> _Story;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnStoryIdChanging(System.Guid value);
    partial void OnStoryIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    #endregion
		
		public StoryView()
		{
			this._Story = default(EntityRef<Story>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_StoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StoryId
		{
			get
			{
				return this._StoryId;
			}
			set
			{
				if ((this._StoryId != value))
				{
					if (this._Story.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoryIdChanging(value);
					this.SendPropertyChanging();
					this._StoryId = value;
					this.SendPropertyChanged("StoryId");
					this.OnStoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_IPAddress", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Association(Name="Story_StoryView", Storage="_Story", ThisKey="StoryId", OtherKey="Id", IsForeignKey=true)]
		public Story Story
		{
			get
			{
				return this._Story.Entity;
			}
			set
			{
				Story previousValue = this._Story.Entity;
				if (((previousValue != value) 
							|| (this._Story.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Story.Entity = null;
						previousValue.StoryViews.Remove(this);
					}
					this._Story.Entity = value;
					if ((value != null))
					{
						value.StoryViews.Add(this);
						this._StoryId = value.Id;
					}
					else
					{
						this._StoryId = default(System.Guid);
					}
					this.SendPropertyChanged("Story");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StoryVote")]
	public partial class StoryVote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StoryId;
		
		private System.Guid _UserId;
		
		private string _IPAddress;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<Story> _Story;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoryIdChanging(System.Guid value);
    partial void OnStoryIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public StoryVote()
		{
			this._Story = default(EntityRef<Story>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_StoryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StoryId
		{
			get
			{
				return this._StoryId;
			}
			set
			{
				if ((this._StoryId != value))
				{
					if (this._Story.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoryIdChanging(value);
					this.SendPropertyChanging();
					this._StoryId = value;
					this.SendPropertyChanged("StoryId");
					this.OnStoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_IPAddress", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="Story_StoryVote", Storage="_Story", ThisKey="StoryId", OtherKey="Id", IsForeignKey=true)]
		public Story Story
		{
			get
			{
				return this._Story.Entity;
			}
			set
			{
				Story previousValue = this._Story.Entity;
				if (((previousValue != value) 
							|| (this._Story.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Story.Entity = null;
						previousValue.StoryVotes.Remove(this);
					}
					this._Story.Entity = value;
					if ((value != null))
					{
						value.StoryVotes.Add(this);
						this._StoryId = value.Id;
					}
					else
					{
						this._StoryId = default(System.Guid);
					}
					this.SendPropertyChanged("Story");
				}
			}
		}
		
		[Association(Name="User_StoryVote", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StoryVotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StoryVotes.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
